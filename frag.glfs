#version 330 core

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoord;

uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 viewPos;

uniform sampler2D outTexture;

out vec4 FragColor;

void main()
{
	float ambientLight = 0.2;
	vec3 ambient = ambientLight * lightColor;

	vec3 normalVector =Normal;
	vec3 lightDir = normalize(lightPos - FragPos);
	float diffuseLight = max(dot(normalVector, lightDir), 0.0);  
	vec3 diffuse = diffuseLight * lightColor;

	float specularStrength = 0.5;
	int shininess = 32;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, normalVector); 
	float specularColor = max(dot(viewDir, reflectDir), 0.0);
	specularColor = pow(specularColor, shininess);
	vec3 specular = specularStrength * specularColor * lightColor;

	vec3 result = (ambient + diffuse + specular) * texture(outTexture, TexCoord).rgb;

	FragColor = vec4(result, 1.0);
}